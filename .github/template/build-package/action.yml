# https://docs.github.com/en/actions/tutorials/create-actions/create-a-composite-action
name: Build .NET package
description: Build a .NET package to be published to nuget.org

inputs:
  project:
    description: The project's name (also the folder name)
    required: true
outputs:
  to-pack:
    description: 1 if the package version is new (not published)
    value: ${{ steps.version-check.outputs.to-pack }}

runs:
  using: "composite"
  steps:
    - name: Restore dependencies
      shell: bash
      run: dotnet restore ${{ inputs.project }}/${{ inputs.project }}.csproj --no-dependencies

    - name: Build ${{ inputs.project }}
      shell: bash
      run: dotnet build ${{ inputs.project }}/${{ inputs.project }}.csproj -c Release --no-restore

    - name: Check package version update
      id: version-check
      shell: bash
      run: |
        PKG=${{ inputs.project }}
        LOCAL_VERSION=$(dotnet msbuild $PKG/$PKG.csproj -getProperty:Version)
        # Get all package search results (local + NuGet)
        SEARCH_RESULTS=$(dotnet package search $PKG --exact-match --verbosity minimal | grep -E "^\|\s*$PKG\s*\|")
        # Extract all versions into an array
        VERSIONS=($(echo "$SEARCH_RESULTS" | awk -F'|' '{gsub(/ /,"",$3); print $3}'))
        UPDATE=1
        # Check if LOCAL_VERSION appears in any of the following versions
        for ((i=0; i<${#VERSIONS[@]}; i++)); do
          if [[ "${VERSIONS[$i]}" == "$LOCAL_VERSION" ]]; then
            echo "Package $PKG version $LOCAL_VERSION already exists on nuget.org."
            UPDATE=0
            break
          fi
        done
        echo "to-pack=$UPDATE" >> $GITHUB_OUTPUT

    - name: Pack ${{ inputs.project }} to local feed
      shell: bash
      run: |
        dotnet pack ${{ inputs.project }}/${{ inputs.project }}.csproj -c Release -o ~/localfeed
